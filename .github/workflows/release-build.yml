name: Lighthouse APIs Maven Release Build
on:
  workflow_call:
    inputs:
      java-version:
        description: 'The java version to build with.'
        type: string
        required: false
        default: '17'
      image-filter:
        description: 'An extended regex expression that will be used to filter images from docker-images output value.'
        type: string
        required: false
    secrets:
      BUILD_GITHUB_USERNAME:
        required: true
      BUILD_GITHUB_TOKEN:
        required: true
    outputs:
      release-version:
        description: "The applications release version for the current build."
        value: ${{ jobs.lighthouse-maven.outputs.release-version }}
      docker-images:
        description: "A new line separated list of (non-test) docker images that were built by the job."
        value: ${{ jobs.lighthouse-maven.outputs.docker-images }}

jobs:
  lighthouse-maven:
    name: Lighthouse Maven Build
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'Next snapshot') || github.event_name != 'push' }}
    outputs:
      release-version: ${{ steps.set_outputs.outputs.release-version }}
      docker-images: ${{ steps.set_outputs.outputs.docker-images }}
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.BUILD_GITHUB_USERNAME }}
          password: ${{ secrets.BUILD_GITHUB_TOKEN }}
      - name: Decide cache name
        env:
          MAVEN_CACHE_NAME: maven-${{ hashFiles('**/pom.xml') }}
        run: |
          echo "MAVEN_CACHE_NAME=${MAVEN_CACHE_NAME}" | tee --append ${GITHUB_ENV}
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # The standard GITHUB_ACTOR cannot push back to a protected branch.
          # We must checkout with a god-mode user.
          token: ${{ secrets.BUILD_GITHUB_TOKEN }}
      - name: Setup Java
        id: setup_java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'corretto'
      - name: Lighthouse maven build
        uses: department-of-veterans-affairs/lighthouse-actions-maven-build@master
        env:
          JAVA_VERSION: ${{ steps.setup_java.outputs.version }}
        with:
          github-username: ${{ secrets.BUILD_GITHUB_USERNAME }}
          github-token: ${{ secrets.BUILD_GITHUB_TOKEN }}
          command: release
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ env.MAVEN_CACHE_NAME }}
      - name: Set outputs
        id: set_outputs
        env:
          GITHUB_REPO: ${{ github.repository }}
          IMAGE_FILTER: ${{ inputs.image-filter }}
        run: |
          echo "release-version=${RELEASE_VERSION:=unknown}" | tee --append ${GITHUB_OUTPUT}
          DOCKER_IMAGES=$(mktemp)
          # All docker images
          echo "${GITHUB_REPO} built the following release images: "
          # SecRel expects the following format
          docker images \
            --filter reference="ghcr.io/${GITHUB_REPO}/*:${RELEASE_VERSION}*" \
            --format '{{.Repository}}:{{.Tag}}' \
          | tee --append ${DOCKER_IMAGES}
          # Filer out test images
          echo "docker-images<<EOF" >> ${GITHUB_OUTPUT}
          if [ -n "${IMAGE_FILTER:-}" ]
          then
            echo "Filtering out images matching the pattern '${IMAGE_FILTER}'."
            cat ${DOCKER_IMAGES} \
              | grep --invert-match --extended-regexp "${IMAGE_FILTER}" \
              | tee --append ${GITHUB_OUTPUT}
          else
            cat ${DOCKER_IMAGES} | tee --append ${GITHUB_OUTPUT}
          fi
          echo "EOF" >> ${GITHUB_OUTPUT}
