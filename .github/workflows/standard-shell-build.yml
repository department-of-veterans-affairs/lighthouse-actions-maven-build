name: Standard Shell Pipeline Build
on:
  workflow_call:
    inputs:
      release:
        description: 'Should release build actions be performed?'
        type: boolean
        required: true
      java-version:
        description: 'The java version to build with.'
        type: string
        required: false
        default: '17'
      image-filter:
        description: 'An extended regex expression that will be used to filter images from docker-images output value.'
        type: string
        required: false
    secrets:
      BUILD_GITHUB_USERNAME:
        required: true
      BUILD_GITHUB_TOKEN:
        required: true
    outputs:
      release-version:
        description: "The applications release version for the current build."
        value: ${{ jobs.standard-shell.outputs.release-version }}
      docker-images:
        description: "A new line separated list of (non-test) docker images that were built by the job."
        value: ${{ jobs.standard-shell.outputs.docker-images }}

jobs:
  standard-shell:
    name: Standard Shell Build
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'Next snapshot') }}
    outputs:
      docker-images: ${{ steps.set_outputs.outputs.docker-images }}
      release-version: ${{ steps.release_actions.outputs.release-version }}
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.BUILD_GITHUB_USERNAME }}
          password: ${{ secrets.BUILD_GITHUB_TOKEN }}
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          # The standard GITHUB_ACTOR cannot push back to a protected branch.
          # We must checkout with a god-mode user.
          token: ${{ secrets.BUILD_GITHUB_TOKEN }}
      - name: Setup Java
        id: setup_java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'corretto'
      - name: Setup Environment
        env:
          RELEASE: ${{ inputs.release }}
        run: |
          echo "RELEASE=${RELEASE:-false}" | tee --append ${GITHUB_ENV}
          echo "VERSION_FILE=${GITHUB_WORKSPACE}/VERSION" | tee --append ${GITHUB_ENV}
      - name: Determine Versions
        run: |
          SNAPSHOT_VERSION=$(head -1 ${VERSION_FILE})
          if [[ ${SNAPSHOT_VERSION} != *SNAPSHOT ]]
          then
            echo "Release version '${SNAPSHOT_VERSION}' number should be a SNAPSHOT (e.g., 1.2.3-SNAPSHOT)."
            exit 1
          fi
          if [ "${RELEASE}" == "false" ]
          then
            echo "VERSION=${SNAPSHOT_VERSION}" | tee --append ${GITHUB_ENV}
            exit 0
          fi
          if [[ ${SNAPSHOT_VERSION} =~ ([0-9]+)\.([0-9]+)\.([0-9]+)(-.*)? ]]
          then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            SNAPS=${BASH_REMATCH[4]}
            RELEASE_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          else
            echo "Do not understand '${VERSION_FILE}'. Should be semantic version (e.g. 1.2.3-SNAPSHOT)."
            exit 1
          fi
          NEXT_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))-SNAPSHOT"
          echo "RELEASE_VERSION=${RELEASE_VERSION}" | tee --append ${GITHUB_ENV}
          echo "VERSION=${RELEASE_VERSION}" | tee --append ${GITHUB_ENV}
          echo "NEXT_VERSION=${NEXT_VERSION}" | tee --append ${GITHUB_ENV}
      - name: Execute Build Script
        env:
          BUILD_GITHUB_USERNAME: ${{ secrets.BUILD_GITHUB_USERNAME }}
          BUILD_GITHUB_TOKEN: ${{ secrets.BUILD_GITHUB_TOKEN }}
        run: |
          bash ${GITHUB_WORKSPACE}/build.sh
      - name: Set Outputs
        id: set_outputs
        env:
          IMAGE_FILTER: ${{ inputs.image-filter }}
        run: |
          DOCKER_IMAGES=$(mktemp)
          docker images
          echo "REPO: ${GITHUB_REPOSITORY}"
          docker images \
          --filter reference="ghcr.io/${GITHUB_REPOSITORY}/*:${RELEASE_VERSION}*" \
          --format '{{.Repository}}:{{.Tag}}' \
          | tee --append ${DOCKER_IMAGES}
          echo "docker-images<<EOF" >> ${GITHUB_OUTPUT}
          if [ -n "${IMAGE_FILTER:-}" ]
          then
            echo "Filtering out images matching the pattern '${IMAGE_FILTER}'."
            cat ${DOCKER_IMAGES} \
              | grep --invert-match --extended-regexp "${IMAGE_FILTER}" \
              | tee --append ${GITHUB_OUTPUT}
          else
            cat ${DOCKER_IMAGES} | tee --append ${GITHUB_OUTPUT}
          fi
          echo "EOF" >> ${GITHUB_OUTPUT}
      - name: Perform Release Actions
        id: release_actions
        if: ${{ inputs.release == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.BUILD_GITHUB_TOKEN }}
        run: |
          gitCommit() {
            local message="${1:-}"
            git diff
            git add $(git status --short | grep "^ M" | cut -c4-)
            git commit --message "${message}"
          }
          # Set-up libertybot to push
          git config user.name libertybot
          git config user.email "<none>"
          #
          echo "Pushing release..."
          echo "release-version=${RELEASE_VERSION}" | tee --append ${GITHUB_OUTPUT}
          echo "${RELEASE_VERSION}" > ${VERSION_FILE}
          RELEASE_MESSAGE="Release ${RELEASE_VERSION} - GitHub Workflow: ${GITHUB_WORKFLOW} ${GITHUB_RUN_ID}"
          gitCommit "${RELEASE_MESSAGE}"
          git tag --force --message "${RELEASE_MESSAGE}" ${RELEASE_VERSION}
          #
          echo "Pushing ${NEXT_VERSION}..."
          echo "${NEXT_VERSION}" > ${VERSION_FILE}
          gitCommit "Next snapshot ${NEXT_VERSION}"
          git push --tags --force
          git push
          #
          echo "Creating Release ${RELEASE_VERSION} in GitHub..."
          gh release create ${RELEASE_VERSION} \
            --verify-tag \
            --title "Release ${RELEASE_VERSION}"